#!/usr/bin/env node

const http = require('http');
const pump = require('pump');
const rangeParser = require('range-parser')
const kat = require('kickass-api');
const omdb = require('omdb');
const program = require('commander');
const chalk = require('chalk');
const readline = require('readline');
const WebTorrent = require('webtorrent');
const mime = require('mime');
const rimraf = require('rimraf');
const fs = require('fs');

const client = new WebTorrent({
  maxConns: 500,
});

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

program
.version('0.0.1')
.option('-m, --movie [name]', 'Search for a movie by its title.')
.option('-v, --verbose', 'Print everything that\'s going on.')
.parse(process.argv);

//clean up
process.on('SIGINT', (code) => {
  client.torrents.forEach((torrent) => {
    rimraf(torrent.path, (arg) => {
      process.exit();
    });
  });
});

if (program.movie)
{
  omdb.get(program.movie, { tomatoes: true, fullPlot: true }, (err, movie) => {
    kat
    .search({ imdb: movie.imdb.id, category: 'Movies', sort_by: 'seeders', order: 'desc'})
    .then((res) => {
      var torrents = res.results;

      if (torrents.length > 0){

        console.log(
          chalk.green.bold(movie.title + '\n%s \n%s \n%s \n%s'),
          chalk.red('Rotten Tomatoes Score: ' + movie.tomato.meter + '\%'),
          chalk.red('Rotten Tomatoes User Score: ' + movie.tomato.userMeter + '\%'),
          chalk.yellow('Seeders: ' + res.results[0].seeds ),
          chalk.blue(movie.plot));

        rl.question(chalk.magenta.bold('Dowload now? '), (answer) => {
          if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes'){
            client.add(torrents[0].magnet);
          }
          else
          {
            rl.close();
            process.exit();
          }
        })
      }

    });
  });
}

client.on('torrent', (torrent) => {
  console.log(chalk.magenta('Torrent added.\n'));
  console.log(torrent.path);
  torrent.files.forEach((file) => {
    if (mime.lookup(file.name).includes('video'))
    {
      var server = http.createServer();

      server.listen(8000);
      server.on('listening', (srv) => {
        console.log(chalk.bold.magenta("Serving movie at http://localhost:8000."));
      });

      server.on('request', (req, res) => {
        var range = req.headers.range;
        range = range && rangeParser(file.length, range)[0];
        res.statusCode = 206
        res.setHeader('Accept-Ranges', 'bytes');
        res.setHeader('Content-Type', mime.lookup(file.name));
        res.setHeader('Content-Length', range.end - range.start + 1)
        res.setHeader('Content-Range', 'bytes ' + range.start + '-' + range.end + '/' + file.length)
        if (req.method === 'HEAD') return res.end();
        pump(file.createReadStream(range), res);
      })
    }
  });

  if (program.verbose)
  {
    torrent.on('download', (chunkSize) => {
    console.log("Chunk Downloaded: " + chunkSize);
    console.log(Math.floor(torrent.progress * 100) 
                  + '\% completed at ' 
                  + Math.floor(torrent.downloadSpeed() / 1024) + 'KB/s');
    });
  }

});


